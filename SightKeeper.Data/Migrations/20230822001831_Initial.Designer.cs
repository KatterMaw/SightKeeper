// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SightKeeper.Data;

#nullable disable

namespace SightKeeper.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230822001831_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4");

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Asset", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataSetId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Usage")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId1");

                    b.ToTable("Assets", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.ItemClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataSetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataSetId");

                    b.ToTable("ItemClasses", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DataSets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DataSet");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ItemClassId");

                    b.ToTable("DetectorItems", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DetectorDataSetId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DetectorDataSetId");

                    b.HasIndex("GameId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScreenshotsLibraryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ScreenshotsLibraryId");

                    b.ToTable("Screenshots", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotsLibrary", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasAnyScreenshots")
                        .HasColumnType("INTEGER");

                    b.Property<ushort?>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ScreenshotsLibraries", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Weights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<uint>("Epoch")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Loss")
                        .HasColumnType("REAL");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WeightsLibraryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("WeightsLibraryId");

                    b.ToTable("Weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.WeightsLibrary", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WeightsLibraries", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorAsset", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.Common.Asset");

                    b.Property<int?>("DataSetId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("DataSetId");

                    b.ToTable("DetectorAssets", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotImage", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.Common.Image");

                    b.Property<int>("ScreenshotId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ScreenshotId")
                        .IsUnique();

                    b.ToTable("ScreenshotImages", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSet<SightKeeper.Domain.Model.Detector.DetectorAsset>", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.DataSet");

                    b.HasDiscriminator().HasValue("DataSet<DetectorAsset>");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Asset", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSet", "DataSet")
                        .WithMany()
                        .HasForeignKey("DataSetId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Screenshot", "Screenshot")
                        .WithOne("Asset")
                        .HasForeignKey("SightKeeper.Domain.Model.Common.Asset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");

                    b.Navigation("Screenshot");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Image", b =>
                {
                    b.OwnsOne("SightKeeper.Domain.Model.Common.Resolution", "Resolution", b1 =>
                        {
                            b1.Property<int>("ImageId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ImageId");

                            b1.ToTable("Images");

                            b1.WithOwner()
                                .HasForeignKey("ImageId");
                        });

                    b.Navigation("Resolution")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.ItemClass", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSet", null)
                        .WithMany("ItemClasses")
                        .HasForeignKey("DataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSet", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Common.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.OwnsOne("SightKeeper.Domain.Model.Common.Resolution", "Resolution", b1 =>
                        {
                            b1.Property<int>("DataSetId")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DataSetId");

                            b1.ToTable("DataSets");

                            b1.WithOwner()
                                .HasForeignKey("DataSetId");
                        });

                    b.Navigation("Game");

                    b.Navigation("Resolution")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorItem", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Detector.DetectorAsset", "Asset")
                        .WithMany("Items")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Common.ItemClass", "ItemClass")
                        .WithMany()
                        .HasForeignKey("ItemClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SightKeeper.Domain.Model.Detector.Bounding", "Bounding", b1 =>
                        {
                            b1.Property<int>("DetectorItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("Bottom")
                                .HasColumnType("REAL");

                            b1.Property<double>("Left")
                                .HasColumnType("REAL");

                            b1.Property<double>("Right")
                                .HasColumnType("REAL");

                            b1.Property<double>("Top")
                                .HasColumnType("REAL");

                            b1.HasKey("DetectorItemId");

                            b1.ToTable("DetectorItems");

                            b1.WithOwner()
                                .HasForeignKey("DetectorItemId");
                        });

                    b.Navigation("Asset");

                    b.Navigation("Bounding")
                        .IsRequired();

                    b.Navigation("ItemClass");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profile", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSet<SightKeeper.Domain.Model.Detector.DetectorAsset>", "DetectorDataSet")
                        .WithMany()
                        .HasForeignKey("DetectorDataSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Common.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.Navigation("DetectorDataSet");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Screenshot", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.ScreenshotsLibrary", "Library")
                        .WithMany()
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.ScreenshotsLibrary", null)
                        .WithMany("Screenshots")
                        .HasForeignKey("ScreenshotsLibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotsLibrary", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSet", "DataSet")
                        .WithOne("ScreenshotsLibrary")
                        .HasForeignKey("SightKeeper.Domain.Model.ScreenshotsLibrary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSet");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Weights", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.WeightsLibrary", null)
                        .WithMany("Weights")
                        .HasForeignKey("WeightsLibraryId");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.WeightsLibrary", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSet", null)
                        .WithOne("WeightsLibrary")
                        .HasForeignKey("SightKeeper.Domain.Model.WeightsLibrary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorAsset", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.DataSet<SightKeeper.Domain.Model.Detector.DetectorAsset>", null)
                        .WithMany("Assets")
                        .HasForeignKey("DataSetId");

                    b.HasOne("SightKeeper.Domain.Model.Common.Asset", null)
                        .WithOne()
                        .HasForeignKey("SightKeeper.Domain.Model.Detector.DetectorAsset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotImage", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Common.Image", null)
                        .WithOne()
                        .HasForeignKey("SightKeeper.Domain.Model.ScreenshotImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Screenshot", "Screenshot")
                        .WithOne("Image")
                        .HasForeignKey("SightKeeper.Domain.Model.ScreenshotImage", "ScreenshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screenshot");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSet", b =>
                {
                    b.Navigation("ItemClasses");

                    b.Navigation("ScreenshotsLibrary")
                        .IsRequired();

                    b.Navigation("WeightsLibrary")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Screenshot", b =>
                {
                    b.Navigation("Asset");

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotsLibrary", b =>
                {
                    b.Navigation("Screenshots");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.WeightsLibrary", b =>
                {
                    b.Navigation("Weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorAsset", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.DataSet<SightKeeper.Domain.Model.Detector.DetectorAsset>", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
