// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SightKeeper.Data;

#nullable disable

namespace SightKeeper.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230812185651_SeparateModelWeightsIntoInternalTrainedAndPreTrained")]
    partial class SeparateModelWeightsIntoInternalTrainedAndPreTrained
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4");

            modelBuilder.Entity("AssetInternalTrainedModelWeights", b =>
                {
                    b.Property<int>("AssetsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InternalTrainedModelWeightsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssetsId", "InternalTrainedModelWeightsId");

                    b.HasIndex("InternalTrainedModelWeightsId");

                    b.ToTable("AssetInternalTrainedModelWeights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Asset", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Assets", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Images", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.ItemClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("ItemClasses", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemClassId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ItemClassId");

                    b.ToTable("DetectorItems", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Models");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ModelType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ModelConfigs");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelWeights", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TrainedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConfigId");

                    b.HasIndex("LibraryId");

                    b.ToTable("ModelWeights");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ModelWeights");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelWeightsLibrary", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ModelWeightsLibraries", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DetectorModelId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DetectorModelId");

                    b.HasIndex("GameId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Screenshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LibraryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.ToTable("Screenshots", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotsLibrary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasAnyScreenshots")
                        .HasColumnType("INTEGER");

                    b.Property<ushort?>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ScreenshotsLibraries", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorAsset", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.Common.Asset");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ModelId");

                    b.ToTable("DetectorAssets", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotImage", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.Common.Image");

                    b.Property<int>("ScreenshotId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ScreenshotId")
                        .IsUnique();

                    b.ToTable("ScreenshotImages", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorModel", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.Model");

                    b.ToTable("DetectorModels", (string)null);
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.InternalTrainedModelWeights", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.ModelWeights");

                    b.Property<float>("Accuracy")
                        .HasColumnType("REAL");

                    b.Property<int>("Batch")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("InternalTrainedModelWeights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelScreenshotsLibrary", b =>
                {
                    b.HasBaseType("SightKeeper.Domain.Model.ScreenshotsLibrary");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("ModelId")
                        .IsUnique();

                    b.ToTable("ModelScreenshotsLibraries", (string)null);
                });

            modelBuilder.Entity("AssetInternalTrainedModelWeights", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Common.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.InternalTrainedModelWeights", null)
                        .WithMany()
                        .HasForeignKey("InternalTrainedModelWeightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.Asset", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Screenshot", "Screenshot")
                        .WithOne("Asset")
                        .HasForeignKey("SightKeeper.Domain.Model.Common.Asset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screenshot");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.ItemClass", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Model", "Model")
                        .WithMany("ItemClasses")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorItem", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Detector.DetectorAsset", "Asset")
                        .WithMany("Items")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Common.ItemClass", "ItemClass")
                        .WithMany("DetectorItems")
                        .HasForeignKey("ItemClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SightKeeper.Domain.Model.Detector.BoundingBox", "BoundingBox", b1 =>
                        {
                            b1.Property<int>("DetectorItemId")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("X1")
                                .HasColumnType("REAL");

                            b1.Property<double>("X2")
                                .HasColumnType("REAL");

                            b1.Property<double>("Y1")
                                .HasColumnType("REAL");

                            b1.Property<double>("Y2")
                                .HasColumnType("REAL");

                            b1.HasKey("DetectorItemId");

                            b1.ToTable("DetectorItems");

                            b1.WithOwner()
                                .HasForeignKey("DetectorItemId");
                        });

                    b.Navigation("Asset");

                    b.Navigation("BoundingBox")
                        .IsRequired();

                    b.Navigation("ItemClass");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Model", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Common.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.OwnsOne("SightKeeper.Domain.Model.Common.Resolution", "Resolution", b1 =>
                        {
                            b1.Property<int>("ModelId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Height")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Width")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ModelId");

                            b1.ToTable("Models");

                            b1.WithOwner()
                                .HasForeignKey("ModelId");
                        });

                    b.Navigation("Game");

                    b.Navigation("Resolution")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelWeights", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.ModelConfig", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.ModelWeightsLibrary", "Library")
                        .WithMany("Weights")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelWeightsLibrary", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Model", "Model")
                        .WithOne("WeightsLibrary")
                        .HasForeignKey("SightKeeper.Domain.Model.ModelWeightsLibrary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Profile", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Detector.DetectorModel", "DetectorModel")
                        .WithMany()
                        .HasForeignKey("DetectorModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Common.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.Navigation("DetectorModel");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Screenshot", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.ScreenshotsLibrary", "Library")
                        .WithMany("Screenshots")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorAsset", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Common.Asset", null)
                        .WithOne()
                        .HasForeignKey("SightKeeper.Domain.Model.Detector.DetectorAsset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Detector.DetectorModel", "Model")
                        .WithMany("Assets")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotImage", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Common.Image", null)
                        .WithOne()
                        .HasForeignKey("SightKeeper.Domain.Model.ScreenshotImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Screenshot", "Screenshot")
                        .WithOne("Image")
                        .HasForeignKey("SightKeeper.Domain.Model.ScreenshotImage", "ScreenshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Screenshot");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorModel", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.Model", null)
                        .WithOne()
                        .HasForeignKey("SightKeeper.Domain.Model.Detector.DetectorModel", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelScreenshotsLibrary", b =>
                {
                    b.HasOne("SightKeeper.Domain.Model.ScreenshotsLibrary", null)
                        .WithOne()
                        .HasForeignKey("SightKeeper.Domain.Model.ModelScreenshotsLibrary", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SightKeeper.Domain.Model.Model", "Model")
                        .WithOne("ScreenshotsLibrary")
                        .HasForeignKey("SightKeeper.Domain.Model.ModelScreenshotsLibrary", "ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Common.ItemClass", b =>
                {
                    b.Navigation("DetectorItems");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Model", b =>
                {
                    b.Navigation("ItemClasses");

                    b.Navigation("ScreenshotsLibrary")
                        .IsRequired();

                    b.Navigation("WeightsLibrary")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ModelWeightsLibrary", b =>
                {
                    b.Navigation("Weights");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Screenshot", b =>
                {
                    b.Navigation("Asset");

                    b.Navigation("Image")
                        .IsRequired();
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.ScreenshotsLibrary", b =>
                {
                    b.Navigation("Screenshots");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorAsset", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SightKeeper.Domain.Model.Detector.DetectorModel", b =>
                {
                    b.Navigation("Assets");
                });
#pragma warning restore 612, 618
        }
    }
}
